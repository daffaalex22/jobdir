// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	jobs "main.go/business/jobs"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateJob provides a mock function with given fields: ctx, domain
func (_m *Repository) CreateJob(ctx context.Context, domain jobs.Domain) (jobs.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 jobs.Domain
	if rf, ok := ret.Get(0).(func(context.Context, jobs.Domain) jobs.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(jobs.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, jobs.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAllJobs provides a mock function with given fields: ctx
func (_m *Repository) DeleteAllJobs(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteJobById provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteJobById(ctx context.Context, id int) (jobs.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 jobs.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) jobs.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(jobs.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterJobByCategory provides a mock function with given fields: ctx, categoryId
func (_m *Repository) FilterJobByCategory(ctx context.Context, categoryId int) ([]jobs.Domain, error) {
	ret := _m.Called(ctx, categoryId)

	var r0 []jobs.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) []jobs.Domain); ok {
		r0 = rf(ctx, categoryId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]jobs.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, categoryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllJobs provides a mock function with given fields: ctx
func (_m *Repository) GetAllJobs(ctx context.Context) ([]jobs.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []jobs.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []jobs.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]jobs.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobById provides a mock function with given fields: ctx, id
func (_m *Repository) GetJobById(ctx context.Context, id int) (jobs.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 jobs.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) jobs.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(jobs.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchJobs provides a mock function with given fields: ctx, title
func (_m *Repository) SearchJobs(ctx context.Context, title string) ([]jobs.Domain, error) {
	ret := _m.Called(ctx, title)

	var r0 []jobs.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) []jobs.Domain); ok {
		r0 = rf(ctx, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]jobs.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
