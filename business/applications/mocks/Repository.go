// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	applications "main.go/business/applications"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateApplication provides a mock function with given fields: ctx, domain
func (_m *Repository) CreateApplication(ctx context.Context, domain applications.Domain) (applications.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 applications.Domain
	if rf, ok := ret.Get(0).(func(context.Context, applications.Domain) applications.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(applications.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, applications.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAllApplications provides a mock function with given fields: ctx
func (_m *Repository) DeleteAllApplications(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllApplications provides a mock function with given fields: ctx
func (_m *Repository) GetAllApplications(ctx context.Context) ([]applications.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []applications.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []applications.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]applications.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
