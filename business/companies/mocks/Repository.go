// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	companies "main.go/business/companies"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteCompany provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteCompany(ctx context.Context, id int) (companies.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 companies.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) companies.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(companies.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCompany provides a mock function with given fields: ctx
func (_m *Repository) GetAllCompany(ctx context.Context) ([]companies.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []companies.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []companies.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]companies.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompanyById provides a mock function with given fields: ctx, id
func (_m *Repository) GetCompanyById(ctx context.Context, id int) (companies.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 companies.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) companies.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(companies.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HardDeleteAllCompanies provides a mock function with given fields: ctx
func (_m *Repository) HardDeleteAllCompanies(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterCompany provides a mock function with given fields: ctx, domain
func (_m *Repository) RegisterCompany(ctx context.Context, domain companies.Domain) (companies.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 companies.Domain
	if rf, ok := ret.Get(0).(func(context.Context, companies.Domain) companies.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(companies.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, companies.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCompany provides a mock function with given fields: ctx, domain
func (_m *Repository) UpdateCompany(ctx context.Context, domain companies.Domain) (companies.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 companies.Domain
	if rf, ok := ret.Get(0).(func(context.Context, companies.Domain) companies.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(companies.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, companies.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
